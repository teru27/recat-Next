import {
  centerArrayCalc,
  dimensional2Array,
  linearFunction,
  rotationMatrix,
} from "../../../util/generalSrc";

export default function blockRotate() {
  const test = (str: string, Anser?: string): boolean | string => {
    const five = 5;
    let flag = true;
    let loteAnser = "";

    let arr = str.split(":");
    const AorB = arr[0];
    let numberArr = arr[1].split("/");

    let board: string[][] = dimensional2Array(five) as string[][];
    const coordinate: string[][] = centerArrayCalc(board, 2, 1);

    for (var i = 0; i < five; i++) {
      const number = numberArr[i];
      if (flag) {
        for (var j = 0; j < five; j++) {
          if (number[j] === "1") {
            const XorY = coordinate[i][j].split(",");

            let { X, Y } = rotationMatrix(
              Number(XorY[0]),
              Number(XorY[1]),
              270
            );

            Y = AorB === "b" ? Y + 1 : Y;

            const XandY = X + "," + Y;
            const indexNumberX = coordinate.findIndex((coord) =>
              coord.includes(XandY)
            );

            if (indexNumberX > -1) {
              const indexNumberY = coordinate[indexNumberX].findIndex(
                (arr) => arr === XandY
              );

              if (indexNumberY > -1) {
                board[indexNumberX][indexNumberY] = "1";
              }
            } else {
              flag = false;
            }
          }
        }
      }
    }

    if (!flag) {
      loteAnser = "-";
    } else {
      for (var i = 0; i < 5; i++) {
        const number = board[i];
        for (var j = 0; j < 5; j++) {
          loteAnser = loteAnser + number[j];
        }
        loteAnser = i < 4 ? loteAnser + "/" : loteAnser;
      }
    }

    console.log(`${loteAnser}` === Anser ? true : loteAnser + "=" + Anser);
    return `${loteAnser}` === Anser ? true : loteAnser + "=" + Anser;
  };
  {
    /*0*/ test(
      "a:00000/00110/00100/00100/00000",
      "00000/00000/00000/11100/00100"
    );
    /*1*/ test("b:00000/00000/00000/00011/00011", "-");
    /*2*/ test("a:00000/00000/00000/00011/00011", "-");
    /*3*/ test(
      "b:00000/00000/00100/00000/00000",
      "00000/00000/01000/00000/00000"
    );
    /*4*/ test(
      "a:00000/00000/00100/00000/00000",
      "00000/00000/00000/01000/00000"
    );
    /*5*/ test(
      "b:00000/00110/00100/00100/00000",
      "00000/00000/11100/00100/00000"
    );
    /*6*/ test(
      "b:00000/00000/00011/00011/00000",
      "00000/00000/00000/11000/11000"
    );
    /*7*/ test("a:00000/00000/00011/00011/00000", "-");
    /*8*/ test(
      "a:01110/00100/00000/00000/00000",
      "00000/00000/00010/00110/00010"
    );
    /*9*/ test(
      "b:01110/00100/00000/00000/00000",
      "00000/00010/00110/00010/00000"
    );
    /*10*/ test(
      "a:00000/11110/00000/00000/00000",
      "00000/00100/00100/00100/00100"
    );
    /*11*/ test(
      "b:00000/11110/00000/00000/00000",
      "00100/00100/00100/00100/00000"
    );
    /*12*/ test("a:00000/00011/00110/00000/00000", "-");
    /*13*/ test(
      "b:00000/00011/00110/00000/00000",
      "00000/00000/01000/01100/00100"
    );
    /*14*/ test(
      "a:00000/11100/11100/11100/00000",
      "00000/11100/11100/11100/00000"
    );
    /*15*/ test(
      "b:00000/11100/11100/11100/00000",
      "11100/11100/11100/00000/00000"
    );
    /*16*/ test("a:01000/00000/00101/10010/10001", "-");
    /*17*/ test("b:01000/00000/00101/10010/10001", "-");
    /*18*/ test(
      "b:10000/00000/10010/00000/00000",
      "01010/00000/00000/01000/00000"
    );
    /*19*/ test(
      "a:10000/00000/10010/00000/00000",
      "00000/01010/00000/00000/01000"
    );
    /*20*/ test("a:00000/10101/11010/11010/01000", "-");
    /*21*/ test("b:00000/10101/11010/11010/01000", "-");
    /*22*/ test(
      "b:01101/00011/01101/00000/00000",
      "00000/01010/01010/00100/01110"
    );
    /*23*/ test("a:01101/00011/01101/00000/00000", "-");
    /*24*/ test("a:00001/00000/00000/00100/00010", "-");
    /*25*/ test("b:00001/00000/00000/00100/00010", "-");
    /*26*/ test(
      "b:00100/00000/00100/01000/00000",
      "00000/10000/01010/00000/00000"
    );
    /*27*/ test(
      "a:00100/00000/00100/01000/00000",
      "00000/00000/10000/01010/00000"
    );
    /*28*/ test(
      "a:00010/00100/00000/10000/00000",
      "00000/10000/00000/00100/00010"
    );
    /*29*/ test(
      "b:00010/00100/00000/10000/00000",
      "10000/00000/00100/00010/00000"
    );
    /*30*/ test("b:11010/00011/10101/00001/00001", "-");
    /*31*/ test("a:11010/00011/10101/00001/00001", "-");
    /*32*/ test(
      "a:00100/00010/00000/11000/00000",
      "00000/10000/10000/00010/00100"
    );
    /*33*/ test(
      "b:00100/00010/00000/11000/00000",
      "10000/10000/00010/00100/00000"
    );
    /*34*/ test(
      "b:01010/00000/00000/01000/00000",
      "00000/10010/00000/00010/00000"
    );
    /*35*/ test(
      "a:01010/00000/00000/01000/00000",
      "00000/00000/10010/00000/00010"
    );
    /*36*/ test(
      "a:00000/00000/00100/10100/00000",
      "00000/10000/00000/11000/00000"
    );
    /*37*/ test(
      "b:00000/00000/00100/10100/00000",
      "10000/00000/11000/00000/00000"
    );
    /*38*/ test("b:10000/01101/01000/01100/10011", "-");
    /*39*/ test("a:10000/01101/01000/01100/10011", "-");
    /*40*/ test("a:00010/00000/00110/01000/10001", "-");
    /*41*/ test("b:00010/00000/00110/01000/10001", "-");
    /*42*/ test(
      "b:00000/01000/01100/00000/00000",
      "00000/01100/01000/00000/00000"
    );
    /*43*/ test(
      "a:00000/01000/01100/00000/00000",
      "00000/00000/01100/01000/00000"
    );
    /*44*/ test(
      "a:01000/00000/00000/10000/00000",
      "00000/10000/00010/00000/00000"
    );
    /*45*/ test(
      "b:01000/00000/00000/10000/00000",
      "10000/00010/00000/00000/00000"
    );
    /*46*/ test("b:00000/01101/00000/01010/11010", "-");
    /*47*/ test("a:00000/01101/00000/01010/11010", "-");
    /*48*/ test("a:00110/00101/00000/10100/00100", "-");
    /*49*/ test("b:00110/00101/00000/10100/00100", "-");
    /*50*/ test(
      "b:11000/10110/00000/00110/00000",
      "00110/00010/10100/10100/00000"
    );
    /*51*/ test(
      "a:11000/10110/00000/00110/00000",
      "00000/00110/00010/10100/10100"
    );
    /*52*/ test("a:00000/00000/00000/00001/00110", "-");
    /*53*/ test("b:00000/00000/00000/00001/00110", "-");
    /*54*/ test(
      "b:01011/10001/00000/00000/00000",
      "00100/00010/00000/00010/00110"
    );
    /*55*/ test("a:01011/10001/00000/00000/00000", "-");
  }
  const exampleUrl = "http://nabetani.sakura.ne.jp/hena/ordf05rotblo/";
  return (
    <div>
      問題URL:
      <a href={exampleUrl} target={"_blank"}>
        {exampleUrl}
      </a>
    </div>
  );
}
